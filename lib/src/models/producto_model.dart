// Generated by https://quicktype.io

import 'dart:io';

class Producto {
  int id;
  String name;
  String slug;
  String permalink;
  String dateCreated;
  String dateCreatedGmt;
  String dateModified;
  String dateModifiedGmt;
  String type;
  String status;
  bool featured;
  String catalogVisibility;
  String description;
  String shortDescription;
  String sku;
  String price;
  String regularPrice;
  String salePrice;
  dynamic dateOnSaleFrom;
  dynamic dateOnSaleFromGmt;
  dynamic dateOnSaleTo;
  dynamic dateOnSaleToGmt;
  String priceHtml;
  bool onSale;
  bool purchasable;
  int totalSales;
  bool virtual;
  bool downloadable;
  List<dynamic> downloads;
  int downloadLimit;
  int downloadExpiry;
  String externalUrl;
  String buttonText;
  String taxStatus;
  String taxClass;
  bool manageStock;
  dynamic stockQuantity;
  String stockStatus;
  String backorders;
  bool backordersAllowed;
  bool backordered;
  bool soldIndividually;
  String weight;
  Dimensions dimensions;
  bool shippingRequired;
  bool shippingTaxable;
  String shippingClass;
  int shippingClassId;
  bool reviewsAllowed;
  String averageRating;
  int ratingCount;
  List<int> relatedIds;
  List<dynamic> upsellIds;
  List<dynamic> crossSellIds;
  int parentId;
  String purchaseNote;
  List<Category> categories;
  List<dynamic> tags;
  List<Image> images;
  List<Attribute> attributes;
  List<DefaultAttribute> defaultAttributes;
  List<dynamic> variations;
  List<dynamic> groupedProducts;
  int menuOrder;
  List<dynamic> metaData;
  Links links;

  Producto({
    this.id,
    this.name,
    this.slug,
    this.permalink,
    this.dateCreated,
    this.dateCreatedGmt,
    this.dateModified,
    this.dateModifiedGmt,
    this.type,
    this.status,
    this.featured,
    this.catalogVisibility,
    this.description,
    this.shortDescription,
    this.sku,
    this.price,
    this.regularPrice,
    this.salePrice,
    this.dateOnSaleFrom,
    this.dateOnSaleFromGmt,
    this.dateOnSaleTo,
    this.dateOnSaleToGmt,
    this.priceHtml,
    this.onSale,
    this.purchasable,
    this.totalSales,
    this.virtual,
    this.downloadable,
    this.downloads,
    this.downloadLimit,
    this.downloadExpiry,
    this.externalUrl,
    this.buttonText,
    this.taxStatus,
    this.taxClass,
    this.manageStock,
    this.stockQuantity,
    this.stockStatus,
    this.backorders,
    this.backordersAllowed,
    this.backordered,
    this.soldIndividually,
    this.weight,
    this.dimensions,
    this.shippingRequired,
    this.shippingTaxable,
    this.shippingClass,
    this.shippingClassId,
    this.reviewsAllowed,
    this.averageRating,
    this.ratingCount,
    this.relatedIds,
    this.upsellIds,
    this.crossSellIds,
    this.parentId,
    this.purchaseNote,
    this.categories,
    this.tags,
    this.images,
    this.attributes,
    this.defaultAttributes,
    this.variations,
    this.groupedProducts,
    this.menuOrder,
    this.metaData,
    this.links,
  });

  Producto.fromJsonMap(Map<String,dynamic> json){

    //trabajando 'attributes'
    var  listAux = json['attributes'] as List;
    List<Attribute> listAttributes = listAux.map((e) => Attribute.fromJsonMap(e)).toList(); 
    //trabajando 'cattegories'
    var listDynamic = json['categories'] as List;
    List<Category> listCategories = listDynamic.map((e) => Category.fromJsonMap(e)).toList();
    //trabajando 'DefaultAttributes'
    var list = json['default_attributes'] as List;
    List<DefaultAttribute> listDefaultAttributes = list.map((e) => DefaultAttribute.fromJsonMap(e)).toList();
    //trabajando 'images'
    var listAuxImages = json['images'] as List;
    List<Image> listImages = listAuxImages.map((e) => Image.fromJsonMap(e)).toList();



    this.id = json['id'];
    this.name = json['name'];
    this.slug = json['slug'];
    this.permalink = json['permalink'];
    this.dateCreated = json['date_created'];
    this.dateCreatedGmt = json['date_created_gmt'];
    this.dateModified = json['date_modified'];
    this.dateModifiedGmt = json['date_modified_gmt'];
    this.type = json['type'];
    this.status = json['status'];
    this.featured = json['featured'];
    this.catalogVisibility = json['catalog_visibility'];
    this.description = json['description'];
    this.shortDescription = json['short_description'];
    this.sku = json['sku'];
    this.price = json['price'];
    this.regularPrice = json['regular_price'];
    this.salePrice = json['sale_price'];
    this.dateOnSaleFrom = json['date_on_sale_from'];
    this.dateOnSaleFromGmt = json['date_on_sale_from_gmt'];
    this.dateOnSaleTo = json['date_on_sale_to'];
    this.dateOnSaleToGmt = json['date_on_sale_to_gmt'];
    this.priceHtml = json['price_html'];
    this.onSale = json['on_sale'];
    this.purchasable = json['purchasable'];
    this.totalSales = json['total_sales'];
    this.virtual = json['virtual'];
    this.downloadable = json['downloadable'];
    this.downloads = json['downloads'];
    this.downloadLimit = json['download_limit'];
    this.downloadExpiry = json['download_expiry'];
    this.externalUrl = json['external_url'];
    this.buttonText = json['button_text'];
    this.taxStatus = json['tax_status'];
    this.taxClass = json['tax_class'];
    this.manageStock = json['manage_stock'];
    this.stockQuantity = json['stock_quantity'];
    this.stockStatus = json['stock_status'];
    this.backorders = json['backorders'];
    this.backordersAllowed = json['backorders_allowed'];
    this.backordered = json['backordered'];
    this.soldIndividually = json['sold_individually'];
    this.weight = json['weight'];
    this.dimensions = Dimensions.fromJsonMap(json['dimensions']);
    this.shippingRequired = json['shipping_required'];
    this.shippingTaxable = json['shipping_taxable'];
    this.shippingClass = json['shipping_class'];
    this.shippingClassId = json['shipping_class_id'];
    this.reviewsAllowed = json['reviews_allowed'];
    this.averageRating = json['average_rating'];
    this.ratingCount = json['rating_count'];
    this.relatedIds = json['related_ids'];
    this.upsellIds = json['upsell_ids'];
    this.crossSellIds = json['cross_sell_ids'];
    this.parentId = json['parent_id'];
    this.purchaseNote = json['purchase_note'];
    this.categories = listCategories;
    this.tags = json['tags'];
    this.images = listImages;
    this.attributes = listAttributes;
    this.defaultAttributes = listDefaultAttributes;
    this.variations = json['variations'];
    this.groupedProducts = json['grouped_products'];
    this.menuOrder = json['menu_order'];
    this.metaData = json['meta_data'];
    this.links = json['_links'];
  }


}

class Attribute {
  int id;
  String name;
  int position;
  bool visible;
  bool variation;
  List<String> options;

  Attribute({
    this.id,
    this.name,
    this.position,
    this.visible,
    this.variation,
    this.options,
  });

  Attribute.fromJsonMap(Map<String,dynamic> jsonAttribute){
    this.id = jsonAttribute['id'];
    this.name = jsonAttribute['name'];
    this.position = jsonAttribute['position'];
    this.visible = jsonAttribute['visible'];
    this.variation = jsonAttribute['variation'];
    this.options = jsonAttribute['options'];
  }

}

class Category {
  int id;
  String name;
  String slug;

  Category({
    this.id,
    this.name,
    this.slug,
  });

  Category.fromJsonMap(Map<String,dynamic> jsonCategory){
    this.id = jsonCategory['id'];
    this.name = jsonCategory['name'];
    this.slug = jsonCategory['slug'];
  }

}

class DefaultAttribute {
  int id;
  String name;
  String option;

  DefaultAttribute({
    this.id,
    this.name,
    this.option,
  });

 DefaultAttribute.fromJsonMap(Map<String,dynamic> jsonDefaultAttribute){
    this.id = jsonDefaultAttribute['id'];
    this.name = jsonDefaultAttribute['name'];
    this.option = jsonDefaultAttribute['option'];
 }


}

class Dimensions {
  String length;
  String width;
  String height;

  Dimensions({
    this.length,
    this.width,
    this.height,
  });

  Dimensions.fromJsonMap(Map<String,dynamic> jsonDimensions){
    this.length = jsonDimensions['length'];
    this.width = jsonDimensions['width'];
    this.height = jsonDimensions['height'];
  }

}

class Image {
  int id;
  String dateCreated;
  String dateCreatedGmt;
  String dateModified;
  String dateModifiedGmt;
  String src;
  String name;
  String alt;

  Image({
    this.id,
    this.dateCreated,
    this.dateCreatedGmt,
    this.dateModified,
    this.dateModifiedGmt,
    this.src,
    this.name,
    this.alt,
  });

  Image.fromJsonMap(Map<String,dynamic> jsonImage){
    this.id = jsonImage['id'];
    this.dateCreated = jsonImage['date_created'];
    this.dateCreatedGmt = jsonImage['date_created_gmt'];
    this.dateModified = jsonImage['date_modified'];
    this.dateModifiedGmt = jsonImage['date_modified_gmt'];
    this.src = jsonImage['src'];
    this.name = jsonImage['name'];
    this.alt = jsonImage['alt'];
  }

}

class Links {
  List<Collection> self;
  List<Collection> collection;

  Links({
    this.self,
    this.collection,
  });

  Links.fromJsonMap(Map<String,dynamic> json){
      //trabajo self
      var listAuxSelf = json['self'] as List;
      List<Collection> listSelf = listAuxSelf.map((e) => Collection.fromJsonMap(e)).toList();
      //trabajo collection
      var listAuxCollection = json['collection'] as List;
      List<Collection> listCollection = listAuxCollection.map((e) => Collection.fromJsonMap(e)).toList();

      this.self = listSelf;
      this.collection = listCollection;

  }

}

class Collection {
  String href;

  Collection({
    this.href,
  });

  Collection.fromJsonMap(Map<String,dynamic> jsonHRef){
      this.href = jsonHRef['href'];
  }

}
